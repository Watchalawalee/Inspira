const cron = require("node-cron");
const mongoose = require("mongoose");
const Exhibition = require("../models/Exhibition");
const Favorite = require("../models/Favorite");
const User = require("../models/User");
const NotificationLog = require("../models/NotificationLog");
const nodemailer = require("nodemailer");
const dayjs = require("dayjs");

// ‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏° MongoDB (‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡πÅ‡∏ö‡∏ö hardcoded)
const MONGO_URI = "mongodb+srv://inspiraproject2025:ypLEu0xL3plfo2AW@exhibition-cluster.ty3ugcy.mongodb.net/exhibition_db";
mongoose.connect(MONGO_URI, {
  useNewUrlParser: true,
  useUnifiedTopology: true,
}).then(() => {
  console.log("‚úÖ Connected to MongoDB");
}).catch((err) => {
  console.error("‚ùå MongoDB connection error:", err);
});

// ‚öôÔ∏è ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢ ‚Üí ISO
const thaiMonths = {
  '‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°': '01', '‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå': '02', '‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°': '03', '‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô': '04',
  '‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏°': '05', '‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô': '06', '‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°': '07', '‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏°': '08',
  '‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô': '09', '‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°': '10', '‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô': '11', '‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°': '12'
};

function parseThaiDateToISO(str) {
  if (dayjs(str, "YYYY-MM-DD", true).isValid()) {
    return str;
  }

  const match = str?.match(/(\d{1,2}) ([‡∏Å-‡πô]+) (\d{4})/);
  if (!match) return null;
  const [_, d, m, y] = match;
  const mm = thaiMonths[m];
  if (!mm) return null;
  return `${y}-${mm}-${d.padStart(2, "0")}`;
}

// üìß ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ SMTP
const transporter = nodemailer.createTransport({
  service: "gmail",
  auth: {
    user: process.env.EMAIL_USERNAME,
    pass: process.env.EMAIL_PASSWORD,
  },
});

async function sendEmail(to, subject, text) {
  await transporter.sendMail({
    from: `"‡∏ô‡∏¥‡∏ó‡∏£‡∏£‡∏®‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô" <${process.env.EMAIL_USERNAME}>`,
    to,
    subject,
    text,
  });
}

// üîî ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ô‡∏¥‡∏ó‡∏£‡∏£‡∏®‡∏Å‡∏≤‡∏£‡πÉ‡∏Å‡∏•‡πâ‡∏à‡∏ö
async function notifyEndingSoon() {
  const today = dayjs();
  const threeDaysLater = today.add(3, "day");
  const exhibitions = await Exhibition.find({ end_date: { $exists: true } });

  for (const ex of exhibitions) {
    const isoEndDate = parseThaiDateToISO(ex.end_date);
    if (!isoEndDate) continue;

    const endDate = dayjs(isoEndDate);
    if (!endDate.isValid() || endDate.isAfter(threeDaysLater)) continue;

    const formattedDate = endDate.format("D MMMM YYYY");
    const favUsers = await Favorite.find({ exhibition_id: ex._id }).distinct("user_id");

    for (const userId of favUsers) {
      const user = await User.findById(userId);
      if (!user || !user.email) continue;

      const alreadySent = await NotificationLog.findOne({
        user_id: new mongoose.Types.ObjectId(userId),
        exhibition_id: new mongoose.Types.ObjectId(ex._id),
      });
      if (alreadySent) continue;

      const msg = `üìÖ ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ‡∏ô‡∏¥‡∏ó‡∏£‡∏£‡∏®‡∏Å‡∏≤‡∏£ "${ex.title}" ‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏∞‡∏à‡∏ö‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ${formattedDate}\n\n‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°:\n${process.env.BASE_URL}/exhibition.html?id=${ex._id}`;

      try {
        await sendEmail(user.email, `‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ‡∏ô‡∏¥‡∏ó‡∏£‡∏£‡∏®‡∏Å‡∏≤‡∏£‡πÉ‡∏Å‡∏•‡πâ‡∏à‡∏ö`, msg);
        await NotificationLog.create({ user_id: userId, exhibition_id: ex._id });
        console.log(`üìß ‡∏™‡πà‡∏á‡πÉ‡∏´‡πâ ${user.email} | ${ex.title}`);
      } catch (err) {
        console.error(`‚ùå ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß‡πÉ‡∏´‡πâ ${user.email}`, err);
      }
    }
  }
}

// üîÅ ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö: ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ô
notifyEndingSoon();
