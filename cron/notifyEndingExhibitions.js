require("dotenv").config();

const mongoose = require("mongoose");
const connectDB = require("../db");
const Exhibition = require("../models/Exhibition");
const Favorite = require("../models/Favorite");
const User = require("../models/User");
const NotificationLog = require("../models/NotificationLog");
const nodemailer = require("nodemailer");
const dayjs = require("dayjs");
const fs = require("fs");

// ‚úÖ Gmail SMTP
const transporter = nodemailer.createTransport({
  service: "gmail",
  auth: {
    user: process.env.EMAIL_USERNAME,
    pass: process.env.EMAIL_PASSWORD,
  },
});
async function sendEmail(to, subject, text) {
  await transporter.sendMail({
    from: `"‡∏ô‡∏¥‡∏ó‡∏£‡∏£‡∏®‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô" <${process.env.EMAIL_USERNAME}>`,
    to,
    subject,
    text,
  });
}

// üîî ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å
async function notifyEndingSoon() {
  await connectDB();
  console.log("‚úÖ Connected to MongoDB");

  const today = dayjs();
  const threeDaysLater = today.add(3, "day");

  console.log("üìå ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ Favorite...");
  const favorites = await Favorite.find({});

  for (const fav of favorites) {
    const user = await User.findById(fav.user_id);
    if (!user || !user.email) {
      console.log("‚ö†Ô∏è ‡∏Ç‡πâ‡∏≤‡∏°: user ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏û‡∏ö", fav.user_id);
      continue;
    }

    const ex = await Exhibition.findById(fav.exhibition_id);
    if (!ex || !ex.end_date_obj) {
      console.log("‚ö†Ô∏è ‡∏Ç‡πâ‡∏≤‡∏°: ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏á‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ end_date_obj:", fav.exhibition_id);
      continue;
    }

    const endDate = dayjs(ex.end_date_obj);
    if (!endDate.isValid()) {
      console.log("‚ö†Ô∏è ‡∏Ç‡πâ‡∏≤‡∏°: end_date_obj ‡πÑ‡∏°‡πà valid:", ex.title);
      continue;
    }

    if (endDate.isAfter(threeDaysLater)) {
      console.log("‚ö†Ô∏è ‡∏Ç‡πâ‡∏≤‡∏°: ‡∏á‡∏≤‡∏ô‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏à‡∏ö:", ex.title, endDate.format("YYYY-MM-DD"));
      continue;
    }

    const alreadySent = await NotificationLog.findOne({
      user_id: user._id,
      exhibition_id: ex._id,
    });
    if (alreadySent) {
      console.log("üì≠ ‡∏Ç‡πâ‡∏≤‡∏°: ‡πÄ‡∏Ñ‡∏¢‡πÅ‡∏à‡πâ‡∏á‡πÅ‡∏•‡πâ‡∏ß:", ex.title, "|", user.email);
      continue;
    }

    const formattedDate = endDate.format("D MMMM YYYY");
    const msg = `üìÖ ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ‡∏ô‡∏¥‡∏ó‡∏£‡∏£‡∏®‡∏Å‡∏≤‡∏£ "${ex.title}" ‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏∞‡∏à‡∏ö‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ${formattedDate}\n\n‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°:\n${process.env.BASE_URL}/exhibition.html?id=${ex._id}`;

    try {
      await sendEmail(user.email, `‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ‡∏ô‡∏¥‡∏ó‡∏£‡∏£‡∏®‡∏Å‡∏≤‡∏£‡πÉ‡∏Å‡∏•‡πâ‡∏à‡∏ö`, msg);
      await NotificationLog.create({ user_id: user._id, exhibition_id: ex._id });
      console.log(`üìß ‡∏™‡πà‡∏á‡πÉ‡∏´‡πâ ${user.email} | ${ex.title}`);
    } catch (err) {
      console.error(`‚ùå ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß‡πÉ‡∏´‡πâ ${user.email}`, err);
    }
  }

  fs.appendFileSync("notify_log.txt", `‚úÖ ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠ ${new Date().toISOString()}\n`);
}

// ‚ñ∂Ô∏è ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô
notifyEndingSoon();
