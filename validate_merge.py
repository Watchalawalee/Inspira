import os
import json
import pandas as pd
import re
from datetime import datetime

# --------------------------
# üìç CONFIG
# --------------------------
merge_dir = "merge_data"

# --------------------------
# üîÑ ‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå merge_data
# --------------------------
all_files = sorted(
    [f for f in os.listdir(merge_dir) if f.startswith("merged_full") and f.endswith(".json")],
    key=lambda x: os.path.getmtime(os.path.join(merge_dir, x)),
    reverse=True
)
if not all_files:
    print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå .json ‡πÉ‡∏ô merge_data/")
    exit()

latest_file = all_files[0]
path = os.path.join(merge_dir, latest_file)
print(f"üìÇ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡πÑ‡∏ü‡∏•‡πå: {latest_file}")

# --------------------------
# üì• ‡πÇ‡∏´‡∏•‡∏î JSON ‡πÄ‡∏Ç‡πâ‡∏≤ DataFrame
# --------------------------
with open(path, "r", encoding="utf-8") as f:
    data = json.load(f)
df = pd.DataFrame(data)

# --------------------------
# üîç ‡∏ï‡∏£‡∏ß‡∏à NULL, ‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á, ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏≥‡πÑ‡∏°‡πà‡∏™‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢
# --------------------------
print("\nüîç ‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô null/NaN:")
print(df.isnull().sum())

print("\nüîç ‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô 'null', 'none', '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•', '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏':")
null_like_words = {"", "null", "none", "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏", "-", "n/a"}
for col in df.columns:
    if df[col].dtype == 'object':
        null_like = df[col].astype(str).str.strip().str.lower().isin(null_like_words)
        count = null_like.sum()
        if count > 0:
            print(f"- {col}: {count} ‡∏Ñ‡πà‡∏≤")

# --------------------------
# üéüÔ∏è ‡∏ï‡∏£‡∏ß‡∏à ticket_price ‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô list ‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç ‡∏´‡∏£‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡∏á
# --------------------------
print("\nüéüÔ∏è ‡∏ï‡∏£‡∏ß‡∏à ticket_price ‡∏ß‡πà‡∏≤‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏´‡∏° (‡∏Ñ‡∏ß‡∏£‡πÄ‡∏õ‡πá‡∏ô list ‡∏´‡∏£‡∏∑‡∏≠ NaN):")
bad_prices = df[~df["ticket_price"].apply(lambda x: isinstance(x, list) or pd.isna(x))]
if not bad_prices.empty:
    print(f"‚ùå ‡∏û‡∏ö {len(bad_prices)} ‡∏Ñ‡πà‡∏≤‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á:")
    print(bad_prices[["title", "ticket_price"]])
else:
    print("‚úÖ ticket_price ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")

# --------------------------
# üìå ‡∏ï‡∏£‡∏ß‡∏à status
# --------------------------
print("\nüìå ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏û‡∏ö‡πÉ‡∏ô status:")
print(df["status"].value_counts())

allowed_status = {"upcoming", "ongoing", "past"}
invalid_status = df[~df["status"].isin(allowed_status)]
if not invalid_status.empty:
    print(f"‚ùå ‡∏û‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ô status: {invalid_status['status'].unique()}")

# --------------------------
# üóìÔ∏è ‡∏ï‡∏£‡∏ß‡∏à‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏ó‡∏¢ (22 ‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏° 2025)
# --------------------------
thai_months = {
    "‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°", "‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå", "‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°", "‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô", "‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏°", "‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô",
    "‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°", "‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏°", "‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô", "‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°", "‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô", "‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°"
}

def is_valid_date_format(date_str):
    if not isinstance(date_str, str):
        return False
    match = re.match(r"^\d{1,2} ([‡∏Å-‡πô]+) (\d{4})$", date_str.strip())
    if not match:
        return False
    month = match.group(1)
    year = int(match.group(2))
    if month not in thai_months:
        return False
    if year < 2020 or year > 2100:
        return False
    return True

def check_date_column(colname):
    print(f"\nüóìÔ∏è ‡∏ï‡∏£‡∏ß‡∏à‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô '{colname}'...")
    invalid = df[~df[colname].apply(is_valid_date_format)]
    if not invalid.empty:
        print(f"‚ùå ‡∏û‡∏ö {len(invalid)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á:")
        print(invalid[[colname, "title"]])
    else:
        print("‚úÖ ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")

check_date_column("start_date")
check_date_column("end_date")

# --------------------------
# üß† ‡∏ï‡∏£‡∏ß‡∏à title ‡∏ã‡πâ‡∏≥
# --------------------------
print("\nüß† ‡∏ï‡∏£‡∏ß‡∏à title ‡∏ã‡πâ‡∏≥:")
duplicate_titles = df[df.duplicated("title", keep=False)]
if not duplicate_titles.empty:
    print(f"‚ùå ‡∏û‡∏ö title ‡∏ã‡πâ‡∏≥‡∏à‡∏≥‡∏ô‡∏ß‡∏ô {len(duplicate_titles)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
    print(duplicate_titles[["title", "start_date", "source_file"]])
else:
    print("‚úÖ ‡πÑ‡∏°‡πà‡∏û‡∏ö title ‡∏ã‡πâ‡∏≥")

# --------------------------
# ‚úÖ ‡∏™‡∏£‡∏∏‡∏õ
# --------------------------
print("\nüéâ ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö")
